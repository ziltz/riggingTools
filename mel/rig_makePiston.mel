
/*

TODO:
    - Check orientation of aim vectors

aim two pistons to each other

- pass in two locators with parentConstraint on each

string $sel[] = `ls -sl`;
rig_makePiston($sel[0], $sel[1], "l_upperArmPiston");

// mirror piston group
rig_makePistonMirror("r_upperArmPiston_GRP");

*/
global proc string rig_makePiston(string $obj1, string $obj2, string $name)
{
	// create transform setup
	string $parentCons[] = {};
	string $offsets[] = {};
	string $aimLocs[] = {};
	string $upLocs[] = {};
	for ($o in {$obj1, $obj2})
	{
		// get constraint
		string $con[] = `listRelatives -typ "constraint" $o`;
		string $constraint = $con[0];

		// get parent objects that are constraining
		string $parents[] = rig_returnConstrainers($o);
		if (size($parents) == 0)
			print ("Please constrain objects to know parent constrainer."+"\n");
		if (`objExists $parents[0]`)
			$parentCons[size($parentCons)] = $parents[0];
		// delete constraint
		catchQuiet(`delete $constraint`);

		// make duplicate locator;
		string $aimLoc = rig_stringFirst(`duplicate -rr -n ($o+"Aim") $o`);
		$aimLocs[size($aimLocs)] = $aimLoc;

		// offset group
		string $offset = rig_objOffset( $aimLoc );
		$offsets[size($offsets)] = $offset;
		// up locator 
		string $upLoc = rig_stringFirst(`duplicate -n ($o+"Up") $o`);
		parent $upLoc $offset;
		setAttr ($upLoc+".translateX") 0;
		setAttr ($upLoc+".translateY") 5;
		setAttr ($upLoc+".translateZ") 0;
		$upLocs[size($upLocs)] = $upLoc;

		// create joints under locator
		string $jntName = `substitute "_LOC" $o "_JNT"`;
		select -cl;
		string $jnt = `joint -n $jntName`;
		delete`parentConstraint $o $jnt`;
		makeIdentity -a 1 -r 1 $jnt;
		parent $jnt $o;
		
	}

	// aimConstraints
	int $i = 0;
	for ($o in {$obj1, $obj2})
	{
		if ($i == 0)
		{
			aimConstraint -offset 0 0 0 -weight 1 -aimVector -1 0 0 -upVector 0 1 0 -worldUpType "object" -worldUpObject $upLocs[$i] $aimLocs[$i] $aimLocs[1];
			rig_objModify($aimLocs[1]);
		}
		else
		{
			aimConstraint -offset 0 0 0 -weight 1 -aimVector 1 0 0 -upVector 0 1 0 -worldUpType "object" -worldUpObject $upLocs[$i] $aimLocs[$i] $aimLocs[0];
			rig_objModify($aimLocs[0]);
		}
		$i++;
	}

	$i = 0;
	// constraint offset and locators to objects
	for ($o in {$obj1, $obj2})
	{

		parentConstraint -mo $aimLocs[$i] $o;
		if (`objExists $parentCons[$i]`)
			parentConstraint -mo $parentCons[$i] $offsets[$i];
		$i++;
	}


	string $group = `group -em -n ($name+"_GRP")`;
	parent $offsets $obj1 $obj2 $group;
	return $group;
}


global proc rig_makePistonMirror(string $pistonGrp)
{
	string $transforms[] = `listRelatives -typ "transform" $pistonGrp`;

	string $side = rig_nameGetSide($pistonGrp);

	string $otherSide = "";
	if ($side == "l")
		$otherSide = "r";
	else
		$otherSide = "l";

	string $grpName = `substitute ($side+"_") $pistonGrp ($otherSide+"_")`;
	$grpName = `substitute ("_GRP") $grpName ("")`;

	// find locs in group
	string $locs[] = {};
	string $constrainer[] = {};
	for ($l in $transforms)
	{
	    if (`gmatch $l "*_LOC"`)
			$locs[size($locs)] = $l;
		if (`gmatch $l "*Offset"`)
		{
			print ("offset = "+$l+"\n");
			string $driver = rig_stringFirst(rig_returnConstrainers($l));
			string $side = rig_nameGetSide($driver);
			string $driverName = $otherSide;
			if ($side == "")
				$driverName = $driver;
			else{
				string $tokens[] = rig_stringToken( $driver, "_" );
				//$driverName = $otherSide;
				for ($i = 1; $i < size($tokens) ; $i++)
				{
					$driverName += ("_"+$tokens[$i]);
				}
			}
			print ("driver = "+$driver+"\n");
			print ("driverName = "+$driverName+"\n");
			$constrainer[size($constrainer)] = $driverName;
		}
	}

	string $obj1 = $locs[0];
	string $obj2 = $locs[1];
	
	string $locators[] = {};
	for ($o in {$obj1, $obj2})
	{
		string $tokens[] = rig_stringToken($o, "_");
		string $name = $otherSide;
		for ($i = 1; $i < size($tokens) ; $i++)
			$name += ("_"+$tokens[$i]);

		if (`objExists $name`)
			error ($name+ " already exists... Check conflicting naming");
		string $loc = rig_stringFirst(`spaceLocator -n $name`);
		delete`parentConstraint $o $loc`;
		$locators[size($locators)] = $loc;
	}

	string $grp = `group -em`;
	parent $locators $grp;
	setAttr ($grp+".sx") -1; 
	parent -w $locators;

	for ($at in {"sx", "sy","sz"})
	{
		setAttr ($locators[0]+"."+$at) 1 ;
		setAttr ($locators[1]+"."+$at) 1 ;
	}

	delete $grp;

	parentConstraint -mo $constrainer[0] $locators[0];
	parentConstraint -mo $constrainer[1] $locators[1];
	rig_makePiston($locators[0], $locators[1], $grpName);

}
